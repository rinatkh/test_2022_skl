// Code generated by MockGen. DO NOT EDIT.
// Source: internal/products/usecase.go

// Package mock_products is a generated GoMock package.
package mock_products

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dto "github.com/rinatkh/test_2022/internal/products/models/dto"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// CreateProduct mocks base method.
func (m *MockUseCase) CreateProduct(params *dto.CreateProductRequest) (*dto.CreateProductResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", params)
	ret0, _ := ret[0].(*dto.CreateProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockUseCaseMockRecorder) CreateProduct(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockUseCase)(nil).CreateProduct), params)
}

// DeleteProduct mocks base method.
func (m *MockUseCase) DeleteProduct(params *dto.DeleteProductRequest) (*dto.DeleteProductResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", params)
	ret0, _ := ret[0].(*dto.DeleteProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockUseCaseMockRecorder) DeleteProduct(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockUseCase)(nil).DeleteProduct), params)
}

// GetProduct mocks base method.
func (m *MockUseCase) GetProduct(params *dto.GetProductRequest) (*dto.GetProductResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", params)
	ret0, _ := ret[0].(*dto.GetProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockUseCaseMockRecorder) GetProduct(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockUseCase)(nil).GetProduct), params)
}

// GetProducts mocks base method.
func (m *MockUseCase) GetProducts(params *dto.GetProductsRequest) (*dto.GetProductsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts", params)
	ret0, _ := ret[0].(*dto.GetProductsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockUseCaseMockRecorder) GetProducts(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockUseCase)(nil).GetProducts), params)
}

// UpdateProduct mocks base method.
func (m *MockUseCase) UpdateProduct(params *dto.UpdateProductRequest) (*dto.UpdateProductResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", params)
	ret0, _ := ret[0].(*dto.UpdateProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockUseCaseMockRecorder) UpdateProduct(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockUseCase)(nil).UpdateProduct), params)
}
